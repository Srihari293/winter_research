//TO BE TESTED

#include <SPI.h>
#include <Ethernet.h>
#include <OSCBundle.h>
#include <EthernetUdp.h>
#include <avr/io.h>

// ------------ CHANGE PARAMETERS HERE --------------- //
// Look in EmotiBit Oscilloscope/data/oscOutputSettings.xml for EmotiBit OSC port and addresses
const unsigned int localPort = 12345; // Local port for receiving OSC messages

const int arduinoPin = 11; // Set the Arduino output pin

// Change these variables to change the filters
const float samplingFreq = 25; // change to match the sampling frequency of the data
const boolean lowPass = true; // toggles on/off the low-pass filter
const float lpCut = 3; // adjusts the cut frequency of the low-pass filter
const boolean highPass = true; // toggles on/off the high-pass filter
const float hpCut = 1; // adjusts the cut frequency of the high-pass filter

EthernetUDP udp;
OSCBundle oscBundle;

// filter variables
float lpFiltVal;
float hpFiltVal;
boolean firstFilt = true;

void setup() {
  Ethernet.begin(mac); // Set your Arduino's MAC address
  udp.begin(localPort);
  
  pinMode(arduinoPin, OUTPUT);
}

void loop() {
  if (udp.parsePacket()) {
    int size = udp.read((char *)&oscBundle, OSCBundle::capacity());
    if (size > 0) {
      while (!oscBundle.isEmpty()) {
        OSCMessage msg;
        oscBundle.getNextMessage(&msg);

        if (msg.fullMatch("/EmotiBit/0/PPG")) {
          float data = msg.getFloat(0);
          data = filter(data);
          digitalWrite(arduinoPin, data > 0.5 ? HIGH : LOW);
        }

        msg.empty();
      }
    }
  }
}

// --------------------------------------------------- //
// Function to do some basic filtering of the data
// Change global filter variables at the top of the file
float filter(float data) {
  const float DIGITAL_FILTER_PI = 3.1415926535897932384626433832795;
  const float DIGITAL_FILTER_E = 2.7182818284590452353602874713526;
  float lpAlpha = pow(DIGITAL_FILTER_E, -2.f * DIGITAL_FILTER_PI * lpCut / samplingFreq);
  float hpAlpha = pow(DIGITAL_FILTER_E, -2.f * DIGITAL_FILTER_PI * hpCut / samplingFreq);
  
  if (lowPass) {
    if (firstFilt) {
      lpFiltVal = data;
    } else {
      lpFiltVal = data * (1. - lpAlpha) + lpFiltVal * lpAlpha;
    }
    data = lpFiltVal;
  }
  
  if (highPass) {
    if (firstFilt) {
      hpFiltVal = data;
    } else {
      hpFiltVal = data * (1. - hpAlpha) + hpFiltVal * hpAlpha;
    }
    data = data - hpFiltVal;
  }
  
  firstFilt = false;
  return data;
}

